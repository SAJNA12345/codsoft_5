#include <iostream>
#include <vector>
#include <string>
#include <ctime>

using namespace std;

struct Book {
    int id;
    string title;
    string author;
    bool isAvailable;

    Book(int i, string t, string a) : id(i), title(t), author(a), isAvailable(true) {}
};

struct Borrower {
    int id;
    string name;
    vector<int> borrowedBookIds;

    Borrower(int i, string n) : id(i), name(n) {}
};

struct Transaction {
    int bookId;
    int borrowerId;
    time_t checkoutTime;
    time_t returnTime;

    Transaction(int bId, int brId, time_t chTime) : bookId(bId), borrowerId(brId), checkoutTime(chTime), returnTime(0) {}
};

class Library {
private:
    vector<Book> books;
    vector<Borrower> borrowers;
    vector<Transaction> transactions;

public:
    void addBook(int id, string title, string author) {
        books.push_back(Book(id, title, author));
    }

    void addBorrower(int id, string name) {
        borrowers.push_back(Borrower(id, name));
    }

    void searchBook(string title) {
        for (const auto &book : books) {
            if (book.title == title) {
                cout << "Book ID: " << book.id << ", Title: " << book.title << ", Author: " << book.author
                     << ", Availability: " << (book.isAvailable ? "Available" : "Checked Out") << endl;
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    void checkoutBook(int bookId, int borrowerId) {
        for (auto &book : books) {
            if (book.id == bookId && book.isAvailable) {
                book.isAvailable = false;
                time_t now = time(0);
                transactions.push_back(Transaction(bookId, borrowerId, now));
                for (auto &borrower : borrowers) {
                    if (borrower.id == borrowerId) {
                        borrower.borrowedBookIds.push_back(bookId);
                    }
                }
                cout << "Book checked out successfully." << endl;
                return;
            }
        }
        cout << "Book is not available." << endl;
    }

    void returnBook(int bookId, int borrowerId) {
        for (auto &book : books) {
            if (book.id == bookId && !book.isAvailable) {
                book.isAvailable = true;
                for (auto &transaction : transactions) {
                    if (transaction.bookId == bookId && transaction.borrowerId == borrowerId && transaction.returnTime == 0) {
                        transaction.returnTime = time(0);
                        cout << "Book returned successfully." << endl;
                        return;
                    }
                }
            }
        }
        cout << "Book return failed." << endl;
    }

    void calculateFine(int bookId, int borrowerId) {
        for (const auto &transaction : transactions) {
            if (transaction.bookId == bookId && transaction.borrowerId == borrowerId) {
                if (transaction.returnTime == 0) {
                    cout << "Book not yet returned." << endl;
                    return;
                }
                double seconds = difftime(transaction.returnTime, transaction.checkoutTime);
                double days = seconds / (60 * 60 * 24);
                double fine = max(0.0, days - 14) * 1.0;  // Assuming 1 unit fine per day after 14 days
                cout << "Fine for book ID " << bookId << ": " << fine << " units." << endl;
                return;
            }
        }
        cout << "Transaction not found." << endl;
    }
};

int main() {
    Library lib;

    lib.addBook(1, "The Great Gatsby", "F. Scott Fitzgerald");
    lib.addBook(2, "1984", "George Orwell");
    lib.addBook(3, "Atomic habits", "James Clear");
    lib.addBook(4, "RICH DAD POOR DAD", "Robert T.kiyosaki");
    lib.addBorrower(1, "John Doe");
    lib.addBorrower(2, "James");

    lib.searchBook("1984");

    lib.checkoutBook(2, 1);
    lib.checkoutBook(4, 2);
    lib.searchBook("Atomic habits");

    lib.returnBook(2, 1);
    lib.calculateFine(2, 1);

    return 0;
}
